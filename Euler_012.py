'''
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''

import datetime
import math


def number_factors(num: int):
    factors = 0
    for i in range(1, int(math.sqrt(num))):
        if num % i == 0:
            factors += 2
    return factors


start_time = datetime.datetime.now()

# Actual code
starting_number = 10 ** 3
number = starting_number

limit = 500

while True:
    if number_factors((number * (number + 1)) / 2) >= limit:
        break
    number += 1

# End actual code
end_time = datetime.datetime.now()
print(
    f'Triangle Number with more than {limit} factors is the {number} Triangle Number ({(number*(number+1))/2})'
    f'with exactly {number_factors((number*(number+1))/2)} ({(end_time - start_time)})'
)
# Triangle Number with more than 500 factors is the 12375 Triangle Number (76576500.0) with exactly 576 (0:00:04.260270)
